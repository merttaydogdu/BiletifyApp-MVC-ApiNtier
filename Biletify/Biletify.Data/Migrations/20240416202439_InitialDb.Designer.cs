// <auto-generated />
using System;
using Biletify.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biletify.Data.Migrations
{
    [DbContext(typeof(BiletifyDbContext))]
    [Migration("20240416202439_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("Biletify.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 703, DateTimeKind.Local).AddTicks(5334),
                            UserId = "80c531f1-2399-4cbd-8f87-ed6feec731d2"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 703, DateTimeKind.Local).AddTicks(5478),
                            UserId = "7e46ca32-d172-404c-a0d2-dfb1c3b9a6f7"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 703, DateTimeKind.Local).AddTicks(5485),
                            UserId = "928cc93a-be1f-4996-9327-bc1cfb44c686"
                        });
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8270),
                            Description = "Spor Müsabakası Biletleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8277),
                            Name = "Spor",
                            Url = "spor-biletleri"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8282),
                            Description = "Sinema Biletleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8282),
                            Name = "Sinema",
                            Url = "sinema-biletleri"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8285),
                            Description = "Konser Biletleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8285),
                            Name = "Müzik",
                            Url = "konser-biletleri"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8287),
                            Description = "Tiyatro Biletleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8288),
                            Name = "Tiyatro ",
                            Url = "tiyatro-biletleri"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8290),
                            Description = "Festival Biletleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8291),
                            Name = "Festival",
                            Url = "festival-biletleri"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8292),
                            Description = "Talk Show Biletleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 704, DateTimeKind.Local).AddTicks(8293),
                            Name = "Talk Show",
                            Url = "talk-show-biletleri"
                        });
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e9dd0d9-b958-4780-a1cd-9da699a562c5",
                            Description = "Tüm yönetici yetkilere sahip kullanıcıların rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "239fa00a-713a-4001-a71b-561158c164ab",
                            Description = "Sınırlı yönetici yetkilere sahip kullanıcıların rolü",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "0fdc2d79-c654-4ab3-bd10-7bce8cbb8c99",
                            Description = "Müşteri tipindeki kullanıcıların rolü",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80c531f1-2399-4cbd-8f87-ed6feec731d2",
                            AccessFailedCount = 0,
                            Address = "Ortabayır Mahallesi Santral Caddesi No:21 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "25855298-cbd2-4351-a932-16e0dce21b3e",
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 223, DateTimeKind.Local).AddTicks(8330),
                            DateOfBirth = new DateTime(1998, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aydogdumert19@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            Gender = "Erkek",
                            LastName = "Aydoğdu",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYDOGDUMERT19@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoN77dK5uQBbKvwjvJImrW7eQPP1Ao44JwOmYEHWx3oHMgKZx3v6TRGK6xtHCQ1yw==",
                            PhoneNumber = "541-208-98-58",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b0a0d23-e24f-4471-a6ce-79a846f630c2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "7e46ca32-d172-404c-a0d2-dfb1c3b9a6f7",
                            AccessFailedCount = 0,
                            Address = "Ortabayır Mahallesi Hünkar Sokak No:21 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "1f99bdb6-77bd-4366-9e08-53ac0561218d",
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 223, DateTimeKind.Local).AddTicks(8413),
                            DateOfBirth = new DateTime(1998, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arslanyusuf8636@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yusuf",
                            Gender = "Erkek",
                            LastName = "Arslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARLSANYUSUF8636@GMAIL.COM",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEM/pzSPuPA2DEU8H6LIqTEu3X0YcKz+W0ReztzWyvYcBTFxbTx82IeyhN0BvJz4jbw==",
                            PhoneNumber = "538-064-20-74",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e5030cf-aebc-49d6-b04e-902a81b09bef",
                            TwoFactorEnabled = false,
                            UserName = "moderator"
                        },
                        new
                        {
                            Id = "928cc93a-be1f-4996-9327-bc1cfb44c686",
                            AccessFailedCount = 0,
                            Address = "Ortabayır Mahallesi Derviş Sokak No:1 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "eb04a860-2432-408a-be11-b9be198f0aac",
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 223, DateTimeKind.Local).AddTicks(8449),
                            DateOfBirth = new DateTime(1996, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arslanmemo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Arslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSLANMEMO@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEB+0FuW2unOdXKDJlciz05ZFcPEd1Ccum1Mjh3cMWiuMCZgRMjhA7SJGZ7KJHonhgA==",
                            PhoneNumber = "555-444-22-58",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd96d1cd-4510-4fa5-aed5-ccd2cdd76c0f",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        });
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2455),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2461),
                            Name = "Fenerbahçe-Galatasaray",
                            Price = 1000m,
                            Properties = "Dev derbinin futbol maçı bileti",
                            Url = "fb-gs-bilet"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2470),
                            ImageUrl = "2.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2470),
                            Name = "Cem Yılmaz Diamond Elite Plus",
                            Price = 700m,
                            Properties = "Ünlü komedyen Cem Yılmaz Stand-Up",
                            Url = "cem-yilmaz-bilet"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2474),
                            ImageUrl = "3.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2474),
                            Name = "Sezen Aksu Konseri (Zorlu PSM)",
                            Price = 350m,
                            Properties = "Minik kuş Sezen Aksu'nun konser bileti",
                            Url = "sezen-aksu-bilet"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2478),
                            ImageUrl = "4.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2479),
                            Name = "Ata Demirer Gazinosu",
                            Price = 400m,
                            Properties = "Ata Demirer talk show gösterisi",
                            Url = "ata-demirer-bilet"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2563),
                            ImageUrl = "5.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2564),
                            Name = "Konuşanlar",
                            Price = 550m,
                            Properties = "Dijital dünyanın talk show gösterisi Hasan Can Kaya",
                            Url = "konusanlar-bilet"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2567),
                            ImageUrl = "6.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2568),
                            Name = "Mahşer-i Cümbüş Oyunu",
                            Price = 400m,
                            Properties = "Türkiye’de modern doğaçlama tiyatronun öncüsü olan Mahşer-i Cümbüş, tiyatroseverler ile buluşmaya devam ediyor",
                            Url = "mahseri-cumbus-bilet"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2570),
                            ImageUrl = "7.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2571),
                            Name = "Duman Konseri (Kuruçeşme)",
                            Price = 800m,
                            Properties = "Türkçe rock öncü grubu Duman",
                            Url = "duman-bilet"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2574),
                            ImageUrl = "8.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2574),
                            Name = "Beekeeper Sinema",
                            Price = 75m,
                            Properties = "Ünlü aksiyon oyuncusu Jason Statham'ın son filmi",
                            Url = "beekeper-bilet"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2577),
                            ImageUrl = "9.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2578),
                            Name = "Fenerbahçe-Real Madrid",
                            Price = 450m,
                            Properties = "Euroleague basketbol heyecanı burada",
                            Url = "fb-rma-bilet"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2581),
                            ImageUrl = "10.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2582),
                            Name = "Tomorrowland 2024 (Almanya)",
                            Price = 1800m,
                            Properties = "Dünyanın en eğlenceli müzik festivali: Tomorrowland 2024",
                            Url = "tomorrowland-bilet"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2586),
                            ImageUrl = "11.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2587),
                            Name = "Örümcek Adam Eve Dönüş Yok Sinema",
                            Price = 75m,
                            Properties = "Örümcek adam serisinin son filmi",
                            Url = "orumcek-adam-bilet"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2591),
                            ImageUrl = "12.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2591),
                            Name = "Chill-Out Festival Istanbul 2024",
                            Price = 600m,
                            Properties = "“Yeryüzündeki Cennet” mottosu ile 18 yılı geride bırakan Chill-Out Festival, 19 Mayıs'ta müzikseverleri Garden Fiesta’da buluşturuyor.",
                            Url = "chill-out-bilet"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2594),
                            ImageUrl = "13.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2594),
                            Name = "80’ler 90’lar Gülümseten Hatıralar",
                            Price = 310m,
                            Properties = "80’ler ‘90lar Gülümseten Hatıralar sizlerle…",
                            Url = "seksenler-doksanlar-bilet"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2597),
                            ImageUrl = "14.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2598),
                            Name = "Beşiktaş-Trabzonspor",
                            Price = 370m,
                            Properties = "Kara kartal ve karadeniz fırtınası futbolda karşı karşıya.",
                            Url = "bjk-ts-bilet"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2600),
                            ImageUrl = "15.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2601),
                            Name = "Anadolu Efes-Galatasaray",
                            Price = 250m,
                            Properties = "Basketbol Türkiye liginde kıyasıya mücadele",
                            Url = "efes-gs-bilet"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2604),
                            ImageUrl = "16.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2605),
                            Name = "Şampiyonlar Ligi Finali",
                            Price = 2000m,
                            Properties = "Şampiyonlar ligi erken rezervasyon final bileti",
                            Url = "samp-ligi-bilet"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2607),
                            ImageUrl = "17.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2608),
                            Name = "Çok Güzel Hareketler 2",
                            Price = 500m,
                            Properties = "Yaklaşık 2 yıl boyunca sahne, senaryo ve oyunculuk eğitimlerinden geçen ve 3 sezondur BKM’de kapalı gişe oynayan Çok Güzel Hareketler 2, Eser Yenenler kaptanlığında seyirciyle buluşmaya devam ediyor.",
                            Url = "cghb-2"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2610),
                            ImageUrl = "18.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2611),
                            Name = "Açık Mikrofon",
                            Price = 400m,
                            Properties = "Eğlence dolu br akşam geçireceğiniz 'Açık Mikrofon Extra' stand up gösterisi sahnede!Yeni hikayeler ve kahkaha dolu anlarla dolu bu gösteri için indirimli stand up biletlerini sakın kaçırmayın...",
                            Url = "acik-mikrofon"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2614),
                            ImageUrl = "19.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2614),
                            Name = "LEGOLAND Discovery Centre",
                            Price = 220m,
                            Properties = "Dünyaca ünlü çocuk ve aile eğlence merkezi LEGOLAND® Discovery Centre İstanbul, 2-17 yaş arasındaki çocuklar ve yetişkinler için bir arada keyifli vakit geçirip, yaratıcılıklarını geliştirecekleri eğlenceli ve öğretici etkinlikler sunuyor. ",
                            Url = "lego-land"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2616),
                            ImageUrl = "20.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 16, 23, 24, 39, 707, DateTimeKind.Local).AddTicks(2617),
                            Name = "Samara Joy",
                            Price = 650m,
                            Properties = "1999 doğumlu sanatçı müzik eğitimini 2021 yılında tamamladı. Aynı yıl kendi adını taşıyan ilk albümü ile JazzTimes tarafından ‘’En İyi Yeni Sanatçı’’ seçildi. Broadway, Inc.'in Porgy ve Bess'in (Summertime) adlı müzik videosunda Women of Color'da yer aldı. ",
                            Url = "samara-joy"
                        });
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "80c531f1-2399-4cbd-8f87-ed6feec731d2",
                            RoleId = "1e9dd0d9-b958-4780-a1cd-9da699a562c5"
                        },
                        new
                        {
                            UserId = "7e46ca32-d172-404c-a0d2-dfb1c3b9a6f7",
                            RoleId = "239fa00a-713a-4001-a71b-561158c164ab"
                        },
                        new
                        {
                            UserId = "7e46ca32-d172-404c-a0d2-dfb1c3b9a6f7",
                            RoleId = "0fdc2d79-c654-4ab3-bd10-7bce8cbb8c99"
                        },
                        new
                        {
                            UserId = "928cc93a-be1f-4996-9327-bc1cfb44c686",
                            RoleId = "0fdc2d79-c654-4ab3-bd10-7bce8cbb8c99"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biletify.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Order", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biletify.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biletify.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biletify.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biletify.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Biletify.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
